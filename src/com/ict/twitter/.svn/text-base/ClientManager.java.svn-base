package com.ict.twitter;

import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.HttpHost;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;

public class ClientManager {
	
	DefaultHttpClient httpclient;

	public ClientManager(){
		
		Initiallize();
		
	}
	
	public void Initiallize(){
		Scheme http = new Scheme("http", 80, PlainSocketFactory.getSocketFactory());
		X509TrustManager tm = new X509TrustManager() {	        
	        public X509Certificate[] getAcceptedIssuers() {return null;}
			@Override
			public void checkClientTrusted(X509Certificate[] arg0, String arg1)
					throws CertificateException {
			}
			@Override
			public void checkServerTrusted(X509Certificate[] arg0, String arg1)
					throws CertificateException {
			}			
		};
		SSLContext ctx = null;
		try {
			ctx = SSLContext.getInstance("TLS");
			ctx.init(null, new TrustManager[]{(TrustManager) tm}, null);			
		} catch (NoSuchAlgorithmException e1) {
			e1.printStackTrace();
		} catch (KeyManagementException e) {
			e.printStackTrace();
		}		
		SSLSocketFactory ssf = new SSLSocketFactory(ctx);		
		Scheme https = new Scheme("https", 443, ssf);		
		SchemeRegistry sr = new SchemeRegistry();
		sr.register(http);
		sr.register(https);	
	}
	public DefaultHttpClient getClient(){		
		httpclient = new DefaultHttpClient();
		HttpHost proxy = new HttpHost("127.0.0.1", 9666);
		httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);		
		return httpclient;		
	}
	public DefaultHttpClient getClientNoProxy(){		
		httpclient = new DefaultHttpClient();
		HttpHost proxy = new HttpHost("127.0.0.1", 9666);
		//httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);		
		return httpclient;		
	}
	
	
	
	
	
}
