package com.ict.twitter.tools;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException;



public class DbOperation {

	
	private static String ip="127.0.0.1";
	
	private static String driver="com.mysql.jdbc.Driver";
	
	private static String user="root";
	
	private static String password="123456";
	
	private static String databaseName="twitter_http";
	
	private static String encode="utf-8";
	
	private Connection connect = null;
	Statement stmt = null;
	
	
	
	public DbOperation() 
	{
		this.reginster();
		this.conDB();
		try 
		{
			stmt = this.connect.createStatement();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	 /**
	  * 加载mysql驱动
	  */
	 public void reginster()
	 {
		 try {
			 Class.forName(driver); //加载MYSQL JDBC驱动程序 
			// System.out.println("Success loading Mysql Driver!");
			 }
			 catch (Exception e) {
			 System.out.print("Error loading Mysql Driver!");
			 e.printStackTrace();
			 }
	 }
	 
	 /**
	  *  连接数据库
	  * @return 连接对象
	  */
	 public Connection conDB()
	 {
		 Connection connect = null;
		 try {
			  connect = DriverManager.getConnection(
					  "jdbc:mysql://"+ip+":3306/"+databaseName+"?useUnicode=true&characterEncoding="+encode, user , password);
			//连接URL为 jdbc:mysql//服务器地址/数据库名
			//后面的2个参数分别是登陆用户名和密码
			 System.out.println("Success connect Mysql server!");
		 } 
		 catch (Exception e) 
		 {
			 System.out.print("get data error!");
			 e.printStackTrace();
		 }
		 this.connect = connect;
		 return connect;
	 }
	 
	 	 
	 /**
	  * 向一个表中插入对象
	  * @param bib
	  * @param table
	  */
	 public boolean insert( String insertSql)
	 {
		
		 try {
			stmt.execute(insertSql);
			
			}
		 	catch(MySQLIntegrityConstraintViolationException e){
		 		System.out.println("重复值出现");
		 		return false;
		 	}
			catch (SQLException e1) {
				// TODO Auto-generated catch block
				//e1.printStackTrace();
				System.out.println(insertSql);
				
			}
			return true;
	 }
	 
	 
	 /**
	  * 
	  * @param查询table里的信息 条件是situation
	  * @param table 要插入的表
	  * @return 结果ResultSet对象
	  */
	 private ResultSet Query(String table,String situation)
	 {   
		 //取得对象每一个成员变量的名字 
		 //查询以条件为situation的结果
		 String sql = " select * from "+ table +"  "+situation +";";
		// System.out.println(sql);

		 ResultSet r = null;	
		try {
			stmt.clearBatch();
			r = stmt.executeQuery(sql);
		}
		catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		/*	try {
					if(stmt!=null)
					{
						stmt.close();
						stmt = null;
					}
					
					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}*/
		}

		 return r;
	 }
	 

	 /**
	  * 取得现在总共有多少信息
	  * @return
	  */
	 public int getTotal(String table)
	 {

		 String sql = "select count(*) from "+ table;
		 int ret = -1;
		 ResultSet r = null;	
		 try 
		 {
			stmt.clearBatch();
			r = stmt.executeQuery(sql);
			if(r.next())
				ret = r.getInt(1);
			return ret;
		  }
		catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return -1;
		}
	 }
	 
	 public  void closeConn() {
			if(this.connect != null) {
				try {
					connect.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
				connect = null;
			}
		}
		
	public  void closeStmt() {
		if(this.stmt != null) {
			try {
				this.stmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			this.stmt = null;
		}
	}
	
	//删除数据库里的所有东西
	public void clearDB(){
		insert("delete from message_relationship;");
		insert("delete from message;");
		insert("delete from user_relationship;");
		insert("delete from user;");	
		
	}
	

}
